package trie_test

import (
	"fmt"
	"log"
	"testing"

	"github.com/figaro-tech/go-figaro/figdb/mock"
	"github.com/figaro-tech/go-figaro/figdb/trie"
)

func ExampleState_Set() {
	state := &trie.State{
		KeyStore: mock.NewKeyStore(),
	}
	do := [][]byte{[]byte("do"), []byte("verb")}
	dog := [][]byte{[]byte("dog"), []byte("puppy")}
	doge := [][]byte{[]byte("doge"), []byte("coin")}
	horse := [][]byte{[]byte("horse"), []byte("stallion")}

	root, err := state.Set(nil, do[0], do[1])
	if err != nil {
		log.Fatal(err)
		return
	}

	fmt.Printf("%#x\n", root)

	root, err = state.Set(root, dog[0], dog[1])
	if err != nil {
		log.Fatal(err)
		return
	}

	fmt.Printf("%#x\n", root)

	root, err = state.Set(root, dog[0], nil)
	if err != nil {
		log.Fatal(err)
		return
	}

	fmt.Printf("%#x\n", root)

	root, err = state.Set(root, dog[0], dog[1])
	if err != nil {
		log.Fatal(err)
		return
	}

	fmt.Printf("%#x\n", root)

	root, err = state.Set(root, doge[0], doge[1])
	if err != nil {
		log.Fatal(err)
		return
	}

	fmt.Printf("%#x\n", root)

	root, err = state.Set(root, horse[0], horse[1])
	if err != nil {
		log.Fatal(err)
		return
	}

	fmt.Printf("%#x\n", root)

	root, err = state.Set(root, horse[0], nil)
	if err != nil {
		log.Fatal(err)
		return
	}

	fmt.Printf("%#x\n", root)

	root, err = state.Set(root, horse[0], horse[1])
	if err != nil {
		log.Fatal(err)
		return
	}

	fmt.Printf("%#x\n", root)

	// Output:
	// 0xc98320646f8476657262
	// 0x30a2e29e52a440b4184d5118ef67207bc4408277c03e40a244f02ce9125b79d7
	// 0xc98320646f8476657262
	// 0x30a2e29e52a440b4184d5118ef67207bc4408277c03e40a244f02ce9125b79d7
	// 0x0897dc12f0a9fdfdfdc58aebf798d303454917409816bb0361a4264359c58168
	// 0x5888437106063661c31dda57f26bf76c63ee1682a1421cee7fe45e8809d67c9a
	// 0x0897dc12f0a9fdfdfdc58aebf798d303454917409816bb0361a4264359c58168
	// 0x5888437106063661c31dda57f26bf76c63ee1682a1421cee7fe45e8809d67c9a
}

func ExampleValidateMPT() {
	state := &trie.State{
		KeyStore: mock.NewKeyStore(),
	}
	do := [][]byte{[]byte("do"), []byte("verb")}
	dog := [][]byte{[]byte("dog"), []byte("puppy")}
	doge := [][]byte{[]byte("doge"), []byte("coin")}
	horse := [][]byte{[]byte("horse"), []byte("stallion")}

	root, err := state.Set(nil, do[0], do[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, dog[0], dog[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, dog[0], dog[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, doge[0], doge[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, horse[0], horse[1])
	if err != nil {
		log.Fatal(err)
		return
	}

	var value []byte
	var proof [][][]byte
	value, proof, err = state.GetAndProve(root, do[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	valid := trie.ValidateMPT(root, do[0], value, proof)
	fmt.Printf("%t\n", valid)

	value, proof, err = state.GetAndProve(root, dog[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	valid = trie.ValidateMPT(root, dog[0], value, proof)
	fmt.Printf("%t\n", valid)

	value, proof, err = state.GetAndProve(root, doge[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	valid = trie.ValidateMPT(root, doge[0], value, proof)
	fmt.Printf("%t\n", valid)

	value, proof, err = state.GetAndProve(root, horse[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	valid = trie.ValidateMPT(root, horse[0], value, proof)
	fmt.Printf("%t\n", valid)

	valid = trie.ValidateMPT(root, []byte("banjo"), value, proof)
	fmt.Printf("%t\n", valid)

	// Output:
	// true
	// true
	// true
	// true
	// false
}

func ExampleState_GetAndProve() {
	state := &trie.State{
		KeyStore: mock.NewKeyStore(),
	}
	do := [][]byte{[]byte("do"), []byte("verb")}
	dog := [][]byte{[]byte("dog"), []byte("puppy")}
	doge := [][]byte{[]byte("doge"), []byte("coin")}
	horse := [][]byte{[]byte("horse"), []byte("stallion")}

	root, err := state.Set(nil, do[0], do[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, dog[0], dog[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, dog[0], dog[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, doge[0], doge[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, horse[0], horse[1])
	if err != nil {
		log.Fatal(err)
		return
	}

	value, proof, err := state.GetAndProve(root, do[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Printf("%s\n", string(value))
	fmt.Printf("%#v\n", proof)

	value, proof, err = state.GetAndProve(root, dog[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Printf("%s\n", string(value))
	fmt.Printf("%#v\n", proof)

	value, proof, err = state.GetAndProve(root, doge[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Printf("%s\n", string(value))
	fmt.Printf("%#v\n", proof)

	value, proof, err = state.GetAndProve(root, horse[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Printf("%s\n", string(value))
	fmt.Printf("%#v\n", proof)

	value, proof, err = state.GetAndProve(root, []byte("banjo"))
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Printf("%#v\n", string(value))
	fmt.Printf("%#v\n", proof)

	// Output:
	// verb
	// [][][]uint8{[][]uint8{[]uint8{0x16}, []uint8{0x1b, 0x56, 0xa5, 0xfb, 0x50, 0xe3, 0x5a, 0x56, 0xf0, 0x84, 0xcd, 0x7, 0xef, 0xa5, 0x33, 0x82, 0xb7, 0x4c, 0x35, 0x7a, 0x91, 0x68, 0x1d, 0x9f, 0x63, 0xdf, 0x6b, 0xf, 0xb2, 0x5e, 0x1e, 0x16}}, [][]uint8{[]uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xba, 0x51, 0xb5, 0x26, 0x46, 0xd5, 0x44, 0x85, 0x88, 0x55, 0x7, 0xaf, 0xa6, 0xbf, 0x0, 0xd9, 0xcb, 0xf6, 0x6a, 0x17, 0x30, 0x6d, 0x8b, 0xcb, 0x9d, 0x5a, 0x6c, 0x7c, 0xd3, 0x31, 0xc9, 0xf}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xcf, 0x85, 0x20, 0x6f, 0x72, 0x73, 0x65, 0x88, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6f, 0x6e}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}}, [][]uint8{[]uint8{0x0, 0x6f}, []uint8{0xc4, 0xe9, 0xac, 0xeb, 0x62, 0xc8, 0x24, 0xf6, 0x28, 0x81, 0x15, 0x73, 0x73, 0x45, 0x90, 0x56, 0x71, 0xcc, 0xd1, 0xa, 0x44, 0x6b, 0x31, 0x23, 0x20, 0x1a, 0xa7, 0x57, 0x61, 0xf1, 0x96, 0x77}}, [][]uint8{[]uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0x78, 0xb, 0x12, 0x2c, 0x7c, 0x56, 0x2a, 0xef, 0x28, 0x67, 0xde, 0x4f, 0xcb, 0xc6, 0x1e, 0x37, 0x50, 0x18, 0x1e, 0x41, 0x14, 0x9, 0xed, 0x96, 0x57, 0x67, 0x29, 0x70, 0x8e, 0xbc, 0x37, 0x5a}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0x76, 0x65, 0x72, 0x62}}}
	// puppy
	// [][][]uint8{[][]uint8{[]uint8{0x16}, []uint8{0x1b, 0x56, 0xa5, 0xfb, 0x50, 0xe3, 0x5a, 0x56, 0xf0, 0x84, 0xcd, 0x7, 0xef, 0xa5, 0x33, 0x82, 0xb7, 0x4c, 0x35, 0x7a, 0x91, 0x68, 0x1d, 0x9f, 0x63, 0xdf, 0x6b, 0xf, 0xb2, 0x5e, 0x1e, 0x16}}, [][]uint8{[]uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xba, 0x51, 0xb5, 0x26, 0x46, 0xd5, 0x44, 0x85, 0x88, 0x55, 0x7, 0xaf, 0xa6, 0xbf, 0x0, 0xd9, 0xcb, 0xf6, 0x6a, 0x17, 0x30, 0x6d, 0x8b, 0xcb, 0x9d, 0x5a, 0x6c, 0x7c, 0xd3, 0x31, 0xc9, 0xf}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xcf, 0x85, 0x20, 0x6f, 0x72, 0x73, 0x65, 0x88, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6f, 0x6e}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}}, [][]uint8{[]uint8{0x0, 0x6f}, []uint8{0xc4, 0xe9, 0xac, 0xeb, 0x62, 0xc8, 0x24, 0xf6, 0x28, 0x81, 0x15, 0x73, 0x73, 0x45, 0x90, 0x56, 0x71, 0xcc, 0xd1, 0xa, 0x44, 0x6b, 0x31, 0x23, 0x20, 0x1a, 0xa7, 0x57, 0x61, 0xf1, 0x96, 0x77}}, [][]uint8{[]uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0x78, 0xb, 0x12, 0x2c, 0x7c, 0x56, 0x2a, 0xef, 0x28, 0x67, 0xde, 0x4f, 0xcb, 0xc6, 0x1e, 0x37, 0x50, 0x18, 0x1e, 0x41, 0x14, 0x9, 0xed, 0x96, 0x57, 0x67, 0x29, 0x70, 0x8e, 0xbc, 0x37, 0x5a}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0x76, 0x65, 0x72, 0x62}}, [][]uint8{[]uint8{0x17}, []uint8{0xdd, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x87, 0xc6, 0x35, 0x84, 0x63, 0x6f, 0x69, 0x6e, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x85, 0x70, 0x75, 0x70, 0x70, 0x79}}, [][]uint8{[]uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xc6, 0x35, 0x84, 0x63, 0x6f, 0x69, 0x6e}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0x70, 0x75, 0x70, 0x70, 0x79}}}
	// coin
	// [][][]uint8{[][]uint8{[]uint8{0x16}, []uint8{0x1b, 0x56, 0xa5, 0xfb, 0x50, 0xe3, 0x5a, 0x56, 0xf0, 0x84, 0xcd, 0x7, 0xef, 0xa5, 0x33, 0x82, 0xb7, 0x4c, 0x35, 0x7a, 0x91, 0x68, 0x1d, 0x9f, 0x63, 0xdf, 0x6b, 0xf, 0xb2, 0x5e, 0x1e, 0x16}}, [][]uint8{[]uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xba, 0x51, 0xb5, 0x26, 0x46, 0xd5, 0x44, 0x85, 0x88, 0x55, 0x7, 0xaf, 0xa6, 0xbf, 0x0, 0xd9, 0xcb, 0xf6, 0x6a, 0x17, 0x30, 0x6d, 0x8b, 0xcb, 0x9d, 0x5a, 0x6c, 0x7c, 0xd3, 0x31, 0xc9, 0xf}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xcf, 0x85, 0x20, 0x6f, 0x72, 0x73, 0x65, 0x88, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6f, 0x6e}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}}, [][]uint8{[]uint8{0x0, 0x6f}, []uint8{0xc4, 0xe9, 0xac, 0xeb, 0x62, 0xc8, 0x24, 0xf6, 0x28, 0x81, 0x15, 0x73, 0x73, 0x45, 0x90, 0x56, 0x71, 0xcc, 0xd1, 0xa, 0x44, 0x6b, 0x31, 0x23, 0x20, 0x1a, 0xa7, 0x57, 0x61, 0xf1, 0x96, 0x77}}, [][]uint8{[]uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0x78, 0xb, 0x12, 0x2c, 0x7c, 0x56, 0x2a, 0xef, 0x28, 0x67, 0xde, 0x4f, 0xcb, 0xc6, 0x1e, 0x37, 0x50, 0x18, 0x1e, 0x41, 0x14, 0x9, 0xed, 0x96, 0x57, 0x67, 0x29, 0x70, 0x8e, 0xbc, 0x37, 0x5a}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0x76, 0x65, 0x72, 0x62}}, [][]uint8{[]uint8{0x17}, []uint8{0xdd, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x87, 0xc6, 0x35, 0x84, 0x63, 0x6f, 0x69, 0x6e, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x85, 0x70, 0x75, 0x70, 0x70, 0x79}}, [][]uint8{[]uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xc6, 0x35, 0x84, 0x63, 0x6f, 0x69, 0x6e}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0x70, 0x75, 0x70, 0x70, 0x79}}, [][]uint8{[]uint8{0x35}, []uint8{0x63, 0x6f, 0x69, 0x6e}}}
	// stallion
	// [][][]uint8{[][]uint8{[]uint8{0x16}, []uint8{0x1b, 0x56, 0xa5, 0xfb, 0x50, 0xe3, 0x5a, 0x56, 0xf0, 0x84, 0xcd, 0x7, 0xef, 0xa5, 0x33, 0x82, 0xb7, 0x4c, 0x35, 0x7a, 0x91, 0x68, 0x1d, 0x9f, 0x63, 0xdf, 0x6b, 0xf, 0xb2, 0x5e, 0x1e, 0x16}}, [][]uint8{[]uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xba, 0x51, 0xb5, 0x26, 0x46, 0xd5, 0x44, 0x85, 0x88, 0x55, 0x7, 0xaf, 0xa6, 0xbf, 0x0, 0xd9, 0xcb, 0xf6, 0x6a, 0x17, 0x30, 0x6d, 0x8b, 0xcb, 0x9d, 0x5a, 0x6c, 0x7c, 0xd3, 0x31, 0xc9, 0xf}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xcf, 0x85, 0x20, 0x6f, 0x72, 0x73, 0x65, 0x88, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6f, 0x6e}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}}, [][]uint8{[]uint8{0x20, 0x6f, 0x72, 0x73, 0x65}, []uint8{0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6f, 0x6e}}}
	// ""
	// [][][]uint8{[][]uint8{[]uint8{0x16}, []uint8{0x1b, 0x56, 0xa5, 0xfb, 0x50, 0xe3, 0x5a, 0x56, 0xf0, 0x84, 0xcd, 0x7, 0xef, 0xa5, 0x33, 0x82, 0xb7, 0x4c, 0x35, 0x7a, 0x91, 0x68, 0x1d, 0x9f, 0x63, 0xdf, 0x6b, 0xf, 0xb2, 0x5e, 0x1e, 0x16}}, [][]uint8{[]uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xba, 0x51, 0xb5, 0x26, 0x46, 0xd5, 0x44, 0x85, 0x88, 0x55, 0x7, 0xaf, 0xa6, 0xbf, 0x0, 0xd9, 0xcb, 0xf6, 0x6a, 0x17, 0x30, 0x6d, 0x8b, 0xcb, 0x9d, 0x5a, 0x6c, 0x7c, 0xd3, 0x31, 0xc9, 0xf}, []uint8{}, []uint8{}, []uint8{}, []uint8{0xcf, 0x85, 0x20, 0x6f, 0x72, 0x73, 0x65, 0x88, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x69, 0x6f, 0x6e}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}, []uint8{}}}
}

func ExampleState_Get() {
	state := &trie.State{
		KeyStore: mock.NewKeyStore(),
	}
	do := [][]byte{[]byte("do"), []byte("verb")}
	dog := [][]byte{[]byte("dog"), []byte("puppy")}
	doge := [][]byte{[]byte("doge"), []byte("coin")}
	horse := [][]byte{[]byte("horse"), []byte("stallion")}

	root, err := state.Set(nil, do[0], do[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, dog[0], dog[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, dog[0], dog[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, doge[0], doge[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, horse[0], horse[1])
	if err != nil {
		log.Fatal(err)
		return
	}

	value, err := state.Get(root, do[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Printf("%s\n", string(value))

	value, err = state.Get(root, dog[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Printf("%s\n", string(value))

	value, err = state.Get(root, doge[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Printf("%s\n", string(value))

	value, err = state.Get(root, horse[0])
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Printf("%s\n", string(value))

	value, err = state.Get(root, []byte("banjo"))
	if err != nil {
		log.Fatal(err)
		return
	}
	fmt.Printf("%#v\n", string(value))

	// Output:
	// verb
	// puppy
	// coin
	// stallion
	// ""
}

func BenchmarkState_Set(b *testing.B) {
	do := [][]byte{[]byte("do"), []byte("verb")}
	dog := [][]byte{[]byte("dog"), []byte("puppy")}
	doge := [][]byte{[]byte("doge"), []byte("coin")}
	horse := [][]byte{[]byte("horse"), []byte("stallion")}

	state := &trie.State{
		KeyStore: mock.NewKeyStore(),
	}
	root, err := state.Set(nil, do[0], do[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, dog[0], dog[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, doge[0], doge[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	for i := 0; i < b.N; i++ {
		state.Set(root, horse[0], horse[1])
	}
}

func BenchmarkState_Get(b *testing.B) {
	do := [][]byte{[]byte("do"), []byte("verb")}
	dog := [][]byte{[]byte("dog"), []byte("puppy")}
	doge := [][]byte{[]byte("doge"), []byte("coin")}

	state := &trie.State{
		KeyStore: mock.NewKeyStore(),
	}
	root, err := state.Set(nil, do[0], do[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, dog[0], dog[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	root, err = state.Set(root, doge[0], doge[1])
	if err != nil {
		log.Fatal(err)
		return
	}
	for i := 0; i < b.N; i++ {
		state.Get(root, doge[0])
	}
}
